{"version":1,"windowDimensions":{"x":-8,"y":-8,"width":1936,"height":1056,"maximized":true},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["C:\\automation\\ops\\Ruby\\NHC\\scripts\\OPS-1267NHCWebDB.rb"],"buffers":[{"id":"273d6f6416d863106835f90c85550b11","text":"#  Program to test the NHC database for changes via webservice calls\r\n#    This program uses the output report from NHCDelta3.rb\r\n#\r\n#  Created 1/7/2014 by Adam Stetser\r\n# Modified 8/13/2015 Brent Asher\r\n\t# .only write failures to output log file\r\n\t# .added new menu system\r\n\t# .added ability to select a sample size\r\n\r\nrequire 'curb'\r\nrequire 'nokogiri'\r\nrequire 'win32console'\r\nrequire_relative 'NHCRubyHelpers'\r\n\r\n@local_filename\r\n\r\ndef filename(d)\r\n   local_filename1 = \"../output/NHCWebDB\" #need to have file name change by day\r\n   filedate = d.strftime(\"%m%d%Y\")\r\n   local_filename2 = '.txt'\r\n   @local_filename = local_filename1+filedate+local_filename2\r\nend\r\nTitle=\"OPS-1267 NHC Input File Delta Report\"\r\n\r\nt=Time.now\r\nfilename(t)\r\nenv=String.new\r\ndbDba_name = String.new\r\nadded_count = 0\r\ndeleted_count = 0\r\nchanged_count = 0\r\ntotal_count = 0\r\npassed_count = 0\r\nfailed_count = 0\r\n\r\nurl=getenv(Title)\r\nenv=url+\"/nursinghomeservices/provider.svc/GetProvidersByIDsXML\"\r\n\r\nputs \"Monitoring in process\"\r\nputs \"#{Title} DB Web test\"\r\ndelta_file = Dir.glob(\"../output/NHC_Ruby_DeltaAuto*\") \r\nfile_location = delta_file[-1].gsub(\"/\", \"\\\\\")\r\nputs \"Using #{file_location} as the input delta file\\n\\n\"\r\n\r\n# env = \"nil\"\r\n# until env != \"nil\"\r\n\r\n# puts \"Enter the number for the environment you are testing\"\r\n# puts \"1 medicare-prod-predeploy.cgifederal.com\"\r\n# puts \"2 QA.medicare.gov\"\r\n# puts \"3 Staging.medicare.gov\"\r\n# puts \"4 www.medicare.gov\"\r\n# puts \"5 medicare-iterationb1-test.cgifederal.com\"\r\n\r\n# environment = gets\r\n# environment.strip!\r\n\r\n# case environment \r\n\r\n# when \"1\"\r\n\t# env = \"medicare-prod-predeploy.cgifederal.com/nursinghomeservices/provider.svc/GetProvidersByIDsXML\"\r\n# when \"2\"\r\n\t# env = \"qa.medicare.gov/nursinghomeservices/provider.svc/GetProvidersByIDsXML\"\r\n# when \"3\"\r\n\t# env = \"staging.medicare.gov/nursinghomeservices/provider.svc/GetProvidersByIDsXML\"\r\n# when \"4\"\r\n\t# env = \"www.medicare.gov/nursinghomeservices/provider.svc/GetProvidersByIDsXML\"\r\n# when \"5\"\r\n\t# env = \"medicare-iterationb1-test.cgifederal.com/nursinghomeservices/provider.svc/GetProvidersByIDsXML\"\r\n# else\r\n\t# puts \"Invalid input\\n\"\t\r\n\t# env = \"nil\"\r\n# end\r\n# end #end loop for prompting until valid input\r\n\r\noutputFile = File.open(@local_filename, 'a') \r\noutputFile.write(\r\n\"#{Title} DB Validation\"+\"\\n\"+\r\nt.strftime(\"%m/%d/%Y %H:%M\")+\"\\n\"+\r\nurl+\"\\n\\n\"+\r\n\"Result  Change  ID     Differences\"+\"\\n\")\r\n\r\nputs \"#{Title}\\n\"\r\nputs \"Environment being tested #{env}\\n\"\r\n\r\n#read NHC DataDelta file by record\r\nFile.foreach(file_location) {|deltaRecord| \r\n\r\n##parse record\r\n   action = deltaRecord[0..9].strip\r\n   deltaID = deltaRecord[11..16].strip\r\n   parsedDeltaRecord = deltaRecord.split(/\\t/)\r\n   deltaName = parsedDeltaRecord[1].strip\r\n   deltaAdr1 = parsedDeltaRecord[2].strip\r\n   deltaCity = parsedDeltaRecord[3].strip\r\n   deltaState = parsedDeltaRecord[4].strip\r\n   deltaZip = parsedDeltaRecord[5].strip\r\n   deltaPhone = parsedDeltaRecord[6].strip.gsub(/[()-]/,\"\").gsub(/\\s/,\"\")\r\n   if !deltaPhone.empty?\r\n      deltaPhone = deltaPhone.insert(6,'-').insert(3,'-')\r\n   end\r\n   deltaOvrl = parsedDeltaRecord[7]\r\n   deltaInsp = parsedDeltaRecord[8]\r\n   deltaStff = parsedDeltaRecord[9]\r\n   deltaQlty = parsedDeltaRecord[10]\r\n   deltaRecord = [deltaID, deltaName, deltaAdr1, deltaCity, deltaState, deltaZip, deltaPhone, deltaOvrl, deltaInsp, deltaStff, deltaQlty]#\r\n\r\n   \r\n   httpstring=\"http://#{env}/#{deltaID}\"\r\n\tresponse=getWebResponse(httpstring)\r\n\t\r\n# #Make the webservice call and if it fails, wait 15 secs and try one more time\r\n   # begin  \r\n      # response = Curl::Easy.perform(\"http://#{env}/#{deltaID}\") do |curl| \r\n          # curl.headers[\"cookie\"] = \"ASPSessionKey=\"\r\n      # end\r\n   # rescue\r\n\t\t# tries ||= 5\r\n        # puts \"There was an issue with the connection, waiting 30 seconds and trying again\"\r\n        # sleep 30\r\n\t\t# if tries > 0\r\n\t\t\t# retry\r\n\t\t# end\r\n   # end\r\n\txml_doc = Nokogiri::XML(response.body_str)\r\n\thtml_doc = Nokogiri::HTML(response.body_str)\r\n#   puts html_doc.text\r\n\tif xml_doc.at('ProviderFinderDO') != NIL\r\n\t\tdbID = html_doc.css('id').text\r\n\t\tdbName = html_doc.css('name').text\r\n\t\tdbAdr1 = html_doc.css('adr1').text\r\n\t\tdbCity = html_doc.css('city').text\r\n\t\tdbState = html_doc.css('state').text\r\n\t\tdbZip = html_doc.css('zip').text\r\n\t\tdbPhone = html_doc.css('phone').text.gsub(/[()-]/,\"\").gsub(/\\s/,\"\")\r\n\t\tif !dbPhone.empty?\r\n\t\t\tdbPhone = dbPhone.insert(6,'-').insert(3,'-')\r\n\t\tend\r\n\t\tdbOvrl = html_doc.css('value')[0].text.split(\"|\")[0]\r\n\t\tdbInsp = html_doc.css('value')[1].text.split(\"|\")[0]\r\n\t\tdbStf = html_doc.css('value')[2].text.split(\"|\")[0]\r\n\t\tdbQlty = html_doc.css('value')[3].text.split(\"|\")[0]\r\n\t\tdbRecord = [dbID, dbName, dbAdr1, dbCity, dbState, dbZip, dbPhone, dbOvrl, dbInsp, dbStf, dbQlty]\r\n\telse\r\n\t\tdbRecord = []\r\n\tend\r\n# Generate Testing Results Report\r\n   \r\n   case action \r\n   when \"+ Added +\"\r\n      added_count = added_count +1\r\n      missing = deltaRecord - dbRecord\r\n      missing.compact!\r\n      if missing.empty?\r\n         print \"PASSED + Added + #{deltaID} \\n\"\r\n         #outputFile.write(\"PASSED +Added+ #{deltaID} \\n\")\r\n         passed_count = passed_count + 1\r\n      else\r\n         print \"FAILED +Added+ #{deltaID} \"\r\n         outputFile.write(\"FAILED +Added+ #{deltaID} \")\r\n         missing.each do |item|\r\n            print item+\" \"\r\n            outputFile.write(item + \" \")\r\n         end\r\n         print \"\\n\"\r\n         outputFile.write(\"\\n\")\r\n         failed_count = failed_count+1\r\n      end\r\n   when \"-Deleted-\"\r\n      dbRecord.reject! {|c| c.empty?}  #remove blank entries\r\n      deleted_count = deleted_count +1\r\n      if dbRecord.empty?\r\n         print \"PASSED -Deleted- #{deltaID} \\n\"\r\n         #outputFile.write(\"PASSED -Deleted- \"+deltaID +\"\\n\")\r\n         passed_count = passed_count + 1\r\n      else\r\n         print \"FAILED -Deleted- \"+\" \"\r\n         outputFile.write(\"FAILED -Deleted- \"+\" \")\r\n         dbRecord.each do |item|\r\n            print item+\" \"\r\n            outputFile.write(\"#{item} \")\r\n         end\r\n         print \"\\n\"\r\n         outputFile.write(\"\\n\")\r\n         failed_count = failed_count+1\r\n      end\r\n   when \"New Data\"\r\n      missing = deltaRecord - dbRecord\r\n      changed_count = changed_count + 1\r\n      missing.compact!\r\n      if missing.empty?\r\n         print \"PASSED\"+\" New Data \"+deltaID +\"\\n\"\r\n         #outputFile.write(\"PASSED New Data \" +deltaID+\"\\n\")\r\n         passed_count = passed_count + 1\r\n      else\r\n         print \"FAILED New Data \"+deltaID +\" \"\r\n         outputFile.write(\"FAILED New Data \"+deltaID +\" \")\r\n         missing.each do |item|\r\n            print item+\" \"\r\n            outputFile.write(item +\" \")\r\n         end\r\n         print \"\\n\"\r\n         outputFile.write(\"\\n\")\r\n         failed_count = failed_count+1\r\n      end\r\n   else\r\n      puts \"Invalid input\"\r\n   end\r\n\r\n\r\n   \r\n# Cleanup and End NHCDataDelta read loop with brace below\r\ndbDba_name = \"\"\r\n}\r\n\r\ntotal_count = added_count + deleted_count + changed_count\r\nt = Time.now\r\noutputFile.write(\r\n\"\\nNHC DB Validation Complete\"+\"\\n\"+t.strftime(\"%m/%d/%Y %H:%M\")+\"\\n\"+\r\n\"Number Added = \"+added_count.to_s+\"\\n\"+\r\n\"Number Deleted = \"+deleted_count.to_s+\"\\n\"+\r\n\"Number Changed = \"+changed_count.to_s+\"\\n\"+\r\n\"Total = \"+total_count.to_s+\"\\n\\n\"+\r\n\"PASSSED = \"+passed_count.to_s+\"\\n\"+ \r\n\"FAILED = \"+failed_count.to_s+\"\\n\\n\") \r\n\r\noutputFile.close\r\n\r\nputs \"\\n #{Title}NHC DB Validation Complete\"+\" \"+t.strftime(\"%m/%d/%Y %H:%M\")+\"\\n\"\r\nputs \"Tested on Environment #{url}\\n\"\r\nputs \"Number Added = \"+added_count.to_s+\"\\n\"\r\nputs \"Number Deleted = \"+deleted_count.to_s+\"\\n\"\r\nputs \"Number Changed = \"+changed_count.to_s+\"\\n\"\r\nputs \"Total = \"+total_count.to_s+\"\\n\\n\"\r\nputs \"PASSSED = \"+passed_count.to_s+\"\\n\"\r\nputs \"FAILED = \"+failed_count.to_s+\"\\n\\n\"\r\n\r\n#puts \"Done\\a\"\r\n\r\nputs \"Finish creating output data \\n\"\r\nprint 'Do you wish to execute the DB test? (Y/N)'\r\n\t\r\ndoDB = gets.strip!\r\nif doDB.upcase == 'Y' then\r\n\tsystem (\"ruby OPS-1267 NHCWebDB.rb\")\r\nend\r\n\r\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":15,"column":0},"end":{"row":15,"column":0}},"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":5,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"C:\\automation\\ops\\Ruby\\NHC\\scripts\\OPS-1267NHCWebDB.rb","digestWhenLastPersisted":"1eeddbf6d70e6066968c020dab1c773cebc9abeb","preferredLineEnding":null,"nextMarkerId":2,"deserializer":"TextBuffer","version":5}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":4,"softTabs":true,"firstVisibleScreenRow":9,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":5,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"C:\\automation\\ops\\Ruby\\NHC\\scripts\\OPS-1267NHCWebDB.rb","bufferId":"273d6f6416d863106835f90c85550b11","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"C:\\automation\\ops\\Ruby\\NHC\\scripts\\OPS-1267NHCWebDB.rb","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-ruby","language-hyperlink","language-todo"],"destroyedItemURIs":[]},"packageStates":{"fuzzy-finder":{"C:\\automation\\ops\\Ruby\\NHC\\scripts\\OPS-1267NHCWebDB.rb":1457972112642},"metrics":{"sessionLength":5323024},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"C:\\automation\\ops\\Ruby\\NHC\\scripts\\OPS-1267NHCWebDB.rb":{"isExpanded":true,"entries":{}}},"selectedPath":"C:\\automation\\ops\\Ruby\\NHC\\scripts\\OPS-1267NHCWebDB.rb","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}},"fullScreen":false}